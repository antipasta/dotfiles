#+TITLE: Config
#+PROPERTY: header-args :results silent
#+STARTUP: overview

* Theme
#+BEGIN_SRC emacs-lisp
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important  ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-molokaimod)

#+END_SRC

* Org mode
(use-package! display-line-numbers

   :ensure nil

   :hook ((text-mode . display-line-numbers-mode)

       (prog-mode . display-line-numbers-mode)

       (conf-mode . display-line-numbers-mode)
       (org-mode  lambda () (display-line-numbers-mode -1)) ))
** Windowing
#+BEGIN_SRC emacs-lisp
(setq global-display-line-numbers-mode nil)

(defun lines-on ()
  (setq display-line-numbers-type t)
  (setq display-line-numbers t)
  (display-line-numbers-mode t))

(defun lines-off ()
  (setq display-line-numbers-type nil)
  (setq display-line-numbers nil)
  (display-line-numbers-mode nil))

(add-hook 'prog-mode-hook (lambda () (lines-on)))
(add-hook 'text-mode-hook (lambda () (lines-on)))
(add-hook 'org-mode-hook (lambda () (lines-off)))

;(setq org-roam-buffer-width 0.15)

(setq org-agenda-window-setup 'other-window)
(setq org-capture-use-agenda-date t)
; maximize on startup
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
(setq org-roam-buffer-window-parameters '(
                                            (setq display-line-numbers-type nil)
  (setq display-line-numbers nil)
					  ))


; toggle horizontal to vertical
(defun window-split-toggle ()
  "Toggle between horizontal and vertical split with two windows."
  (interactive)
  (if (> (length (window-list)) 2)
      (error "Can't toggle with more than 2 windows!")
    (let ((func (if (window-full-height-p)
                    #'split-window-vertically
                  #'split-window-horizontally)))
      (delete-other-windows)
      (funcall func)
      (save-selected-window
        (other-window 1)
        (switch-to-buffer (other-buffer))))))

#+END_SRC
** Navigating notes
#+BEGIN_SRC emacs-lisp
(defun my/navigate-note (arg &optional note choices)
  "Navigate notes by link. With universal ARG tries to use only to navigate the tags of the current note. Optionally takes a selected NOTE and filepaths CHOICES."
  (interactive "P")
  (let* ((choices (or
                   choices
                   (when arg (org-roam-db--links-with-max-distance (buffer-file-name) 1))))
         (all-notes (org-roam--get-title-path-completions))
         (completions
          (or (--filter (-contains-p choices (plist-get (cdr it) :path)) all-notes) all-notes))
         (title-with-tags (org-roam-completion--completing-read "File: " completions))
         (res (cdr (assoc title-with-tags completions)))
         (next-note (plist-get res :path)))
    (if (string= note next-note)
        (find-file note)
      (my/navigate-note nil next-note (org-roam-db--links-with-max-distance next-note 1)))))

#+END_SRC

** Directory/Files
#+BEGIN_SRC emacs-lisp

;; dont auto-open backlink buffer
(setq +org-roam-open-buffer-on-find-file nil)

(setq org-directory "~/org/")
(setq org-roam-directory "~/org/roam/")
(setq org-roam-dailies-directory "daily/")
(setq org-archive-location "~/org/roam/archive.org::")
(defun newer-than-30-days(file)
  (> 7
     (/(float-time(time-subtract
                   (current-time )
                   (nth 5 (file-attributes file)) ))
       86400)))


(defun +org/opened-buffer-files ()
  "Return the list of files currently opened in emacs"
  (delq nil
        (mapcar (lambda (x)
                  (if (and (buffer-file-name x)
                           (string-match "\\.org$"
                                         (buffer-file-name x)))
                      (buffer-file-name x)))
                (buffer-list))))

(setq org-refile-targets '(
                            ("~/org/roam/20210402090030-links.org" :level . 0 )
                            ("~/org/roam/20210417225225-books.org" :level . 0)
                            ("~/org/roam/20210331094749-emacs_setup.org" :maxlevel . 1)
                            ("~/org/roam/synced/20210403104611-tasks.org" :maxlevel . 3)
                            ("~/org/roam/20210403193652-cooking.org" :maxlevel . 2)
                            ("~/org/roam/20210404183305-restaurants.org" :level . 1)
                           (+org/opened-buffer-files :maxlevel . 1)
                           (org-agenda-files :maxlevel . 1)
                           ))
#+END_SRC
** Capture
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
    '(
      ("t" "Todo" entry (file "~/org/roam/synced/inbox.org")
       "* TODO %?\n/created/ %U" :empty-lines 0)
      ("d" "deadline" entry (file "~/org/roam/synced/inbox.org")
       "* TODO %?\nDEADLINE: %u" :empty-lines 0)
      ("D" "tomorrow" entry (file "~/org/roam/synced/inbox.org")
       "* TODO %?\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+1d\"))" :empty-lines 0)
       ("w" "Work" entry (file+olp "~/org/roam/synced/20210403104611-tasks.org" "Tasks" "Work")
       "* TODO %?\n/created/ %U" :empty-lines 0)
       ("h" "Home" entry (file+olp "~/org/roam/synced/20210403104611-tasks.org" "Tasks" "Home")
       "* TODO %?\n/created/ %U" :empty-lines 0)
      ("T" "Todo with Clipboard" entry (file "~/org/roam/synced/inbox.org")
       "* TODO %?\n   %c" :empty-lines 0)
      ("n" "Note" entry (file "~/org/roam/synced/inbox.org")
       "* %?" :empty-lines 0)
      ("N" "Note with Clipboard" entry (file "~/org/roam/synced/inbox.org")
       "* %?\n   %c" :empty-lines 0)
       ("l" "Link" entry (file+headline "~/org/roam/20210402090030-links.org" "Personal")
	   "* [[%c][%?]]\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n" :empty-lines 0)
    ))
#+END_SRC
** Visibility
org mode seems to ignore my per-headline visibility properties unless this is set?

#+BEGIN_SRC emacs-lisp
(setq org-startup-folded 'showall)

#+END_SRC


** Daily Journals
#+BEGIN_SRC emacs-lisp


(defun my-org-roam-dailies-split-today ()
  "Split today function"
  (interactive)
  (+workspace/new)
  (+workspace/rename "today")
  (org-roam-dailies-find-today)
  (save-buffer)
  ;(split-window-vertically)
  ;(other-window 1)
  ;(org-roam-dailies-find-previous-note 1)
  (goto-line 5)
  ;(fit-window-to-buffer)
  ;(previous-window-any-frame)
  )



(setq org-roam-dailies-capture-templates
      '(("d" "default" entry
         #'org-roam-capture--get-point
         "* %?"
         :head "%[templates/daily.tmpl]"
         :file-name "daily/%<%Y-%m-%d>"
         )))

; some journaling shortcuts i stole from someplace
(map! :leader
      (:prefix-map ("j" . "journal")
       :desc "Capture new journal entry" "n" #'org-roam-dailies-capture-today
       :desc "Go to today's journal entry" "t" #'org-roam-dailies-find-today
       :desc "Go to yesterday's journal entry" "y" #'org-roam-dailies-find-yesterday
       :desc "Go to tomorrow's journal entry" "o" #'org-roam-dailies-find-tomorrow
       :desc "Go to previous journal entry" "j" #'org-roam-dailies-find-previous-note
       :desc "Go to next journal entry" "k" #'org-roam-dailies-find-next-note
       :desc "Go to previous journal entry" "[" #'org-roam-dailies-find-previous-note
       :desc "Go to next journal entry" "]" #'org-roam-dailies-find-next-note
       :desc "Go to today and yesterday's entries" "T" 'my-org-roam-dailies-split-today
       :desc "Find date" "d" #'org-roam-dailies-find-date))

#+END_SRC

** todo settings
#+BEGIN_SRC emacs-lisp
; set closed time on todo close
(setq org-log-done 'time)

; this key is mapped by evil mode to temporarily enter an emacs mode for key shortcuts, unset that..
(define-key evil-motion-state-map "\\" 'org-agenda-filter-by-tag)
(map! :after org-agenda
      :map org-agenda-mode-map
      :localleader
      ;:leader
      :desc "todo" "t" #'(lambda () (interactive) (org-capture nil "t"))
      :desc "capture deadline" "d" #'air-org-agenda-capture
      :desc "tomorrow" "D" #'(lambda () (interactive) (org-capture nil "D"))
      )


; custom todo states
(after! org
    (setq org-todo-keywords
        '(
          (sequence "TODO(t)" "NEXT(n)" "DOING(o)" "WAITING(w)" "PROJ(p)" "HOLD(h)" "|" "DONE(d)")
          (sequence "[ ]" "|" "[X]")
          )
        org-todo-keyword-faces
        '(("[-]"  . +org-todo-active)
          ("DOING" . +org-todo-active)
          ("WAITING" . +org-todo-onhold)
          ("KILL" . +org-todo-cancel)))

)

#+END_SRC
** shortcuts
#+BEGIN_SRC emacs-lisp
(after! org-roam
        (map! :leader
            :prefix "n"
            ;;:desc "org-roam" "l" #'org-roam
           ;; :desc "org-roam-switch-to-buffer" "b" #'org-roam-switch-to-buffer
            ;;:desc "org-roam-show-graph" "g" #'org-roam-show-graph
            :desc "org-roam-insert" "i" #'org-roam-insert
            :desc "org-roam-toggle-buffer-display" "b" #'org-roam-buffer-toggle-display
            :desc "org-roam-find-file" "f" #'org-roam-find-file
            :desc "org-roam-capture" "c" #'org-roam-capture
            :desc "org-super-agenda" "A" #'org-agenda-show-superdaily)
        (map! :leader
              :desc "org-refile" "r" #'org-refile
              :desc "org-agenda" "a" #'org-agenda
              :desc "ox-clip-formatted-copy" "y" #'ox-clip-formatted-copy
              )

        )
#+END_SRC

*** Org abbreviation
#+BEGIN_SRC emacs-lisp
(define-skeleton skel-org-block
  "Insert an org block, querying for type."
  "Type: "
  "#+BEGIN_SRC emacs-lisp"  "\n"
  _ - \n
  "#+END_SRC"  "\n")

  (define-abbrev org-mode-abbrev-table "blk" "" 'skel-org-block)
#+END_SRC





** Search headlines
#+BEGIN_SRC emacs-lisp
(defun ivy-org-jump-to-agenda-heading ()
  "Jump to a heading in an agenda file."
  (interactive)
  (let ((headlines '()))
    ;; these files should be open already since they are agenda files.
    (cl-loop for file in (org-agenda-files) do
	  (with-current-buffer (find-file-noselect file)
	    (save-excursion
	      (goto-char (point-min))
	      (while (re-search-forward org-heading-regexp nil t)
		(cl-pushnew (list
			     (format "%-80s (%s)"
				     (match-string 0)
				     (file-name-nondirectory file))
			     :file file
			     :position (match-beginning 0))
			    headlines)))))
    (ivy-read "Headline: "
	      (reverse headlines)
	      :action (lambda (candidate)
			(org-mark-ring-push)
			(find-file (plist-get (cdr candidate) :file))
			(goto-char (plist-get (cdr candidate) :position))
			(outline-show-entry)))))


                        (defun ivy-org-jump-to-heading-in-files (files &optional fontify)
  "Jump to org heading in FILES.
Optional FONTIFY colors the headlines. It might slow things down
a lot with large numbers of org-files or long org-files. This
function does not open the files."
  (let ((headlines '()))
    (cl-loop for file in files do
	  (when (file-exists-p file)
	    (with-temp-buffer
	      (insert-file-contents file)
	      (when fontify
		(org-mode)
		(font-lock-ensure))
	      (goto-char (point-min))
	      (while (re-search-forward org-heading-regexp nil t)
		(cl-pushnew (list
			     (format "%-80s (%s)"
				     (match-string 0)
				     (file-name-nondirectory file))
			     :file file
			     :position (match-beginning 0))
			    headlines)))))
    (ivy-read "Headline: "
	      (reverse headlines)
	      :action (lambda (candidate)
			(org-mark-ring-push)
			(find-file (plist-get (cdr candidate) :file))
			(goto-char (plist-get (cdr candidate) :position))
			(outline-show-entry)))))

(defun ivy-org-jump-to-heading-in-directory (&optional recursive)
  "Jump to heading in an org file in the current directory.
Use a prefix arg to make it RECURSIVE.
Use a double prefix to make it recursive and fontified."
  (interactive "P")
  (let ((fontify nil))
    (when (equal recursive '(16))
      (setq fontify t))
    (ivy-org-jump-to-heading-in-files
     (f-entries "."
		(lambda (f)
		  (and
		   (f-ext? f "org")
		   (not (s-contains? "#" f))))
		recursive)
     fontify)))


(defun ivy-org-jump-to-project-headline (&optional fontify)
  "Jump to a headline in an org-file in the current project.
The project is defined by projectile. Use a prefix arg FONTIFY
for colored headlines."
  (interactive "P")
  (ivy-org-jump-to-heading-in-files
   (mapcar
    (lambda (f) (expand-file-name f (projectile-project-root)))
    (-filter (lambda (f)
	       (and
		(f-ext? f "org")
		(not (s-contains? "#" f))
		(not (s-contains? "archive.org" f))
		(not (s-contains? "1001_albums" f))
                )
               )
	     (projectile-current-project-files)))
   fontify))


#+END_SRC

* Evil mode
#+BEGIN_SRC emacs-lisp
(setq evil-want-C-u-scroll nil
      evil-want-C-d-scroll nil)
; lets me use ; instead of : to enter vim command mode
(evil-define-key 'motion 'global
  ";" #'evil-ex)

(evil-define-key 'normal org-mode-map
  ";" #'evil-ex)


(global-set-key
  (kbd "M-p") 'org-roam-find-file)


; <leader>x instead of alt-M x to get to emacs command mode
(map! :leader
      :desc "Execute Extended command" "x" #'execute-extended-command)

(setq doom-leader-key ",")
(setq doom-leader-alt-key "M-,")

; not sure when localleader is used...
(setq doom-localleader-key ", m")
(setq doom-localleader-alt-key "M-, m")
(evil-ex-define-cmd "vsp" 'split-and-select)


; external keyboard alt key as meta
(cond (IS-MAC
       (setq
             mac-right-option-modifier 'meta)))

(define-key  evil-normal-state-map (kbd "C-k") '+workspace/switch-right)
(define-key  evil-normal-state-map (kbd "C-j") '+workspace/switch-left)

(map! "C-k" #'+workspace/switch-right)
(map! "C-j" #'+workspace/switch-left)


#+END_SRC
* Misc
#+BEGIN_SRC emacs-lisp
;; revert files automatically if theyve been modified outside of emacs
(global-auto-revert-mode 1)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.



#+END_SRC

** Set name
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Joe Papperello"
      user-mail-address "joe@doe.com")
#+END_SRC

* Super agenda
#+BEGIN_SRC emacs-lisp
(setq org-tag-alist '(("work" . ?w) ("home" . ?h) ("ramona" . ?r) ("buy" . ?b) ("someday" . ?s) ("ma" . ?m) ("link" . ?l)))

; dont need to show project tag
(setq org-agenda-hide-tags-regexp (regexp-opt '("project")))

(use-package! org-super-agenda
  :after org-agenda
  :init
  (setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator nil
      org-agenda-compact-blocks t
      org-agenda-start-day nil ;; i.e. today
      org-agenda-sorting-strategy '(time-up todo-state-down)
      org-agenda-span 1
      org-agenda-start-on-weekday nil)
  (setq org-agenda-custom-commands
        '(
          ("c" "Super view"
           ((agenda "" ((org-agenda-overriding-header "")
                        (org-super-agenda-groups
                         '(
                           (:name "Today"
                                  :time-grid t
                                  :date today
                                  :order 1)
                            (:name "Upcoming Deadlines"
                                   :deadline future

                                   :order 100)
                           ))
                        ))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:log t)
                            (:discard (:scheduled today  :todo "[ ]"))
                            (:name "Doing"
                                   :todo "DOING")
                            (:name "Next"
                                   :todo "NEXT"
                                   :order 1)
                            (:name "Highlights"
                                   :priority "B"
                                   :order 2)
                            (:name "Waiting"
                                   :todo "WAITING"
                                   :order 10)
                            (:name "Scheduled Soon"
                                   :scheduled future
                                   :order 8)
                            (:name "Journal"
                                   :file-path "daily/")
                            (:name "Overdue"
                                   :deadline past
                                   :order 7)
                            (:name "Inbox"
                                   :order 9
                                   :file-path "synced/inbox\\.org")
         (:discard (:deadline future :deadline today :deadline past :scheduled future :scheduled today :scheduled past))
        (:discard (:anything))
                            (:discard (:not (:todo "TODO"))))))))
           )
          ("t" "TODO Super view"
           (
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:log t)
                            (:discard (
                                       :todo "[ ]"
                                       ))
                            (:name "DOING"
                                   :todo "DOING"
                                   :order 1
                                   )
                            (:name "Next"
                                   :todo "NEXT"
                                   :order 2)
                            (:name "Highlights"
                                   :priority "B"
                                   :order 3)
                            (:name "Today"
;                            :auto-category t
                                         :scheduled today
                                         :deadline today
                                         :deadline past
                                         :order 4
                            )
                            (:name "Scheduled Soon"
                                   :scheduled future
                                   :order 10)
                            (:name "Home"
                             :order 5
                                   :and (
                                         :tag "home"
                                         :not (:tag "someday")

                                         )
                            )
                            (:name "Work"
                             :order 6
                                   :and (
                                         :tag "work"
                                         :not (:tag "someday")

                                         )
                            )
                            (:name "Someday"
                                   :tag "someday"
                                :order 7
                                   )
                            (:name "Other"
                             :order 8
                                   :anything)
        (:discard (:anything))
                            (:discard (:not (:todo "TODO"))))))))
           )
          ("T" "reworked TODO Super view"
           (
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:log t)
                            (:discard (
                                       :todo "[ ]"
                                       :scheduled future
                                       ))
                            (:name "DOING"
                                   :todo "DOING"
                                   :order 1
                                   )
                            (:name "Today"
;                            :auto-category t
                             :order 2
                                         :scheduled today
                                         :deadline today
                                         :deadline past
                            )
                            (:name "Someday"
                                   :tag "someday"
                                   :order 100
                                   )
        (:discard (:anything))
                            (:discard (:not (:todo "TODO")))))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:log t)
                            (:discard (:todo "[ ]" :todo "DOING" :tag "someday"))
                            (:auto-category t
                             :order 3
                             )
        (:discard (:anything))
                            (:discard (:not (:todo "TODO"))))))))
           )
          ("h" "highlight view"
           (
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:log t)
                            (:discard (
                                       :todo "[ ]"
                                       ))
                            (:name "DOING"
                                   :todo "DOING"
                                   :order 1
                                   )
                            (:name "Next"
                                   :todo "NEXT"
                                   :order 2)
                            (:name "Highlights"
                                   :priority "B"
                                   :order 3)
                            (:name "Today"
;                            :auto-category t
                                         :scheduled today
                                         :deadline today
                                         :deadline past
                                         :order 4
                            )
        (:discard (:anything)
                            )))))
           )
          )))
  :config
  (org-super-agenda-mode))



(defun air-org-agenda-capture (&optional vanilla)
  "Capture a task in agenda mode, using the date at point.

If VANILLA is non-nil, run the standard `org-capture'."
  (interactive "P")
  (if vanilla
      (org-capture)
    (let ((org-overriding-default-time (org-get-cursor-date)))
      (org-capture nil "d"))))




#+END_SRC

* Oneoff
#+BEGIN_SRC emacs-lisp

(defun split-and-select()
  "Split and ctrl-p"
  (interactive)
  (when (= (length (window-list)) 1)
  (split-window-right))
  (other-window 1)
  (org-roam-find-file)
  )


;; Save the corresponding buffers immediately after a refile
(defun gtd-save-org-buffers ()
  "Save `org-agenda-files' buffers without user confirmation.
See also `org-save-all-org-buffers'"
  (interactive)
  (message "Saving org-agenda-files buffers...")
  (save-some-buffers t (lambda ()
             (when (member (buffer-file-name) org-agenda-files)
               t)))
  (message "Saving org-agenda-files buffers... done"))

;; Add it after refile
(advice-add 'org-refile :after
        (lambda (&rest _)
          (gtd-save-org-buffers)))


(defun clip-file ()
  "Put the current file name on the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      (file-name-directory default-directory)
                    (buffer-file-name))))
    (when filename
      (x-select-text filename))))

#+END_SRC
** testing auto add todo org files to agenda
*** [[https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html][Task management with org-roam Vol. 5: Dynamic and fast agenda]] ( used older version compatbile with org roam v1 )
#+BEGIN_SRC emacs-lisp

(defun vulpea-project-p ()
  "Return non-nil if current buffer has any todo entry.

TODO entries marked as done are ignored, meaning the this
function returns nil if current buffer contains only completed
tasks."
  (org-element-map
       (org-element-parse-buffer 'headline)
       'headline
     (lambda (h)
       (eq (org-element-property :todo-type h)
           'todo))
     nil 'first-match))

(defun vulpea-project-update-tag ()
  "Update PROJECT tag in the current buffer."
  (when (and (not (active-minibuffer-window))
             (vulpea-buffer-p))
    (let* ((file (buffer-file-name (buffer-base-buffer)))
           (all-tags (org-roam--extract-tags file))
           (prop-tags (org-roam--extract-tags-prop file))
           (tags prop-tags))
      (if (vulpea-project-p)
          (setq tags (cons "Project" tags))
        (setq tags (remove "Project" tags)))
      (unless (eq prop-tags tags)
        (org-roam--set-global-prop
         "ROAM_TAGS"
         (combine-and-quote-strings (seq-uniq tags)))))))

(defun vulpea-buffer-p ()
  "Return non-nil if the currently visited buffer is a note."
  (and buffer-file-name
       (string-prefix-p
        (expand-file-name (file-name-as-directory org-roam-directory))
        (file-name-directory buffer-file-name))))

(defun vulpea-project-files ()
  "Return a list of note files containing Project tag."
  (seq-map
   #'car
   (org-roam-db-query
    [:select file
     :from tags
     :where (and (like tags (quote "%\"Project\"%"))
     (not-like tags (quote "%\"omit\"%")))

                        ]))
  )

(defun vulpea-agenda-files-update (&rest _)
  "Update the value of `org-agenda-files'."
  (setq org-agenda-files    (append '("~/code/cal2org/calendars/sf.org" "~/code/cal2org/calendars/piano.org" "~/code/cal2org/calendars/ej.org" "~/code/cal2org/calendars/joeyis.org" )
   (vulpea-project-files))))

(add-hook 'find-file-hook #'vulpea-project-update-tag)
(add-hook 'before-save-hook #'vulpea-project-update-tag)

(advice-add 'org-agenda :before #'vulpea-agenda-files-update)
(advice-add 'org-todo-list :before #'vulpea-agenda-files-update)
#+END_SRC
** copy done entries to todays journal

#+BEGIN_SRC emacs-lisp
(defun my/org-roam-copy-todo-to-today ()
  (interactive)
  (let ((org-refile-keep t) ;; Set this to nil to delete the original!
        (org-roam-dailies-capture-templates
      '(("t" "tasks" entry
         #'org-roam-capture--get-point
         "%?"
         :file-name "daily/%<%Y-%m-%d>"
         :head "%[templates/daily.tmpl]"
         :olp ("Log")
         )))
        (org-after-refile-insert-hook #'save-buffer)
        today-file
        pos)
    (save-window-excursion
      (org-roam-dailies--capture (current-time) t)
      (setq today-file (buffer-file-name))
      (setq pos (point)))

    ;; Only refile if the target file is different than the current file
    (unless (equal (file-truename today-file)
                   (file-truename (buffer-file-name)))
      (org-refile nil nil (list "Agenda" today-file nil pos)))))

(add-to-list 'org-after-todo-state-change-hook
             (lambda ()
               (when (equal org-state "DONE")
                 (my/org-roam-copy-todo-to-today))))
#+END_SRC
* TEMPORARY
org-capture doesnt start properly after opening org-agenda
[[https://github.com/hlissner/doom-emacs/issues/5714][more info]]
#+BEGIN_SRC emacs-lisp
(after! org
  (defadvice! dan/+org--restart-mode-h-careful-restart (fn &rest args)
    :around #'+org--restart-mode-h
    (let ((old-org-capture-current-plist (and (bound-and-true-p org-capture-mode)
                                              (bound-and-true-p org-capture-current-plist))))
      (apply fn args)
      (when old-org-capture-current-plist
        (setq-local org-capture-current-plist old-org-capture-current-plist)
        (org-capture-mode +1)))))

#+END_SRC

org-cliplink fails frequently for https sites, switch to curl
#+BEGIN_SRC emacs-lisp
    (setq org-cliplink-transport-implementation 'curl)

#+END_SRC
